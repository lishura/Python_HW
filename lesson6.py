# Задание №1
# Вспомните какие модули вы уже проходили на курсе.
# Создайте файл, в котором вы импортируете встроенные в модуль функции под псевдонимами. (3-7 строк импорта).

# import random as rnd
# import pandas as pd
# import numpy as np
# import seaborn as sns
# import scipy as sc
# import math as mt
# from decimal import Decimal as D
# from sys import argv as arguments
# from fractions import Fraction as F

# Задание №2
# Создайте модуль с функцией внутри.
# Функция принимает на вход три целых числа: нижнюю и верхнюю границу и количество попыток.
# Внутри генерируется случайное число в указанных границах и пользователь должен угадать его за заданное число попыток.
# Функция выводит подсказки “больше” и “меньше”.
# Если число угадано, возвращается истина, а если попытки исчерпаны - ложь.


from random import randint
import sys
def guess_number(low:int=0, up:int=100, counter:int=10)->bool:
    guess = randint(low, up)
    for _ in range(counter):
        number = int(input("Введите число: "))
        if number < guess:
            print("Загаданное число больше")
        elif number > guess:
            print("Загаданное число меньше")
        else:
            print("Поздравляю Вы угадали!")
            return True
    print("Увы, Вы не угадали. Попытки кончились")
    return False

# if __name__ == '__main__':
#     guess_number()

# Задание №3 Улучшаем задачу 2.
# Добавьте возможность запуска функции “угадайки” из модуля в командной строке терминала.
# Строка должна принимать от 1 до 3 аргументов: параметры вызова функции.
# Для преобразования строковых аргументов командной строки в числовые параметры используйте генераторное выражение.

# if __name__ == '__main__':
#     param = sys.argv[1:]
#     guess_number(*(int(item) for item in param))

# Задание №4
# Создайте модуль с функцией внутри.
# Функция получает на вход загадку, список с возможными вариантами отгадок и количество попыток на угадывание.
# Программа возвращает номер попытки, с которой была отгадана загадка или ноль, если попытки исчерпаны.


# def puzzles(puzzle: str, answers: list[str], counter: int = 3) -> int:
#     print("Отгадай загадку")
#     print(f'{puzzle}')
#     for i in range(counter):
#         answer = input("Введите ответ: ").lower()
#         if answer in answers:
#             print("Поздравляем, Вы угадали")
#             return i + 1
#     print("К сожалению Вы не угадали. Попытки исчерпаны.")
#     return 0
#
#
# if __name__ == '__main__':
#     puzzles("Зимой и летом одним цветом", ["ель", "елка", "ёлка", "сосна"])


# Задание №5
# Добавьте в модуль с загадками функцию, которая хранит словарь списков.
# Ключ словаря - загадка, значение - список с отгадками.
# Функция в цикле вызывает загадывающую функцию, чтобы передать ей все свои загадки.

# def puzzles(puzzle: str, answers: list[str], counter: int = 3) -> int:
#     print("Отгадай загадку")
#     print(f'{puzzle}')
#     for i in range(counter):
#         answer = input("Введите ответ: ").lower()
#         if answer in answers:
#             print("Поздравляем, Вы угадали")
#             return i + 1
#     print("К сожалению Вы не угадали. Попытки исчерпаны.")
#     return 0
#
#
# def puzzles_storage():
#     storage = {
#         "Зимой и летом одним цветом": ["ель", "елка", "ёлка", "сосна"],
#         "Не лает, не кусает, в дом не пускает": ["замок", "засов", "домофон"],
#         "Висит груша, нельзя скушать": ["лампа", "лампочка", "светильник"]
#     }
#     for k,v in storage.items():
#         result = puzzles(k,v)
#         print("Не угадал" if not result else f"Вы угадали с {result} попытки")
#
#
# if __name__ == '__main__':
#     puzzles_storage()


# Задание №6
# Добавьте в модуль с загадками функцию, которая принимает на вход строку (текст загадки) и число (номер попытки, с которой она угадана).
# Функция формирует словарь с информацией о результатах отгадывания.
# Для хранения используйте защищённый словарь уровня модуля.
# Отдельно напишите функцию, которая выводит результаты угадывания из защищённого словаря в удобном для чтения виде.
# Для формирования результатов используйте генераторное выражение.

# _data = {}
#
#
# def puzzles(puzzle: str, answers: list[str], counter: int = 3) -> int:
#     print("Отгадай загадку")
#     print(f'{puzzle}')
#     for i in range(counter):
#         answer = input("Введите ответ: ").lower()
#         if answer in answers:
#             print("Поздравляем, Вы угадали")
#             return i + 1
#     print("К сожалению Вы не угадали. Попытки исчерпаны.")
#     return 0
#
#
# def puzzles_storage():
#     storage = {
#     "Зимой и летом одним цветом": ["ель", "елка", "ёлка", "сосна"],
#     "Не лает, не кусает, в дом не пускает": ["замок", "засов", "домофон"],
#     "Висит груша, нельзя скушать": ["лампа", "лампочка", "светильник"]
#     }
#     for k, v in storage.items():
#         result = puzzles(k, v)
#         save_results(k, result)
#         print("Не угадал" if not result else f"Вы угадали с {result} попытки")
#
#
# def save_results(text: str, num: int):
#     _data[text] = num
#
#
# def show_results():
#     res = (
#         f"Загадку {k} не угадали" if not v
#         else f"Вы угадали загадку {k} с {v} попытки"
#         for k, v in _data.items()
#         )
#     print(*res, sep='\n')
#
#
# if __name__ == '__main__':
#     puzzles_storage()
#     show_results()


# Задание №7
# Создайте модуль и напишите в нём функцию, которая получает на вход дату в формате DD.MM.YYYY
# Функция возвращает истину, если дата может существовать или ложь, если такая дата невозможна.
# Для простоты договоримся, что год может быть в диапазоне [1, 9999].
# Весь период (1 января 1 года - 31 декабря 9999 года) действует Григорианский календарь.
# Проверку года на високосность вынести в отдельную защищённую функцию.


def _is_leap(year: int) -> bool:
    return year % 4 == 0 and year % 100 != 0 or year % 400 == 0


def date_is_true(data: str) -> bool:
    day, month, year = list(map(int, data.split('.')))
    check_days = {
    1: 31,
    2: 29 if _is_leap(year) else 28,
    3: 31,
    4: 30,
    5: 31,
    6: 30,
    7: 31,
    8: 31,
    9: 30,
    10: 31,
    11: 30,
    12: 31
    }
    max_day = check_days.get(month)
    if not max_day or (year > 9999 or year < 1) or (day > max_day or day < 1):
        return False
    else:
        return True

if __name__ == '__main__':
    print(date_is_true("01.13.2024"))
    print(date_is_true("32.11.2024"))
    print(date_is_true("29.02.2024"))
    print(date_is_true("01.11.10000"))
    print(date_is_true("01.01.1999"))

# Создайте пакет с всеми модулями, которые вы создали за время занятия.
# Добавьте в __init__ пакета имена модулей внутри дандер __all__.
# В модулях создайте дандер __all__ и укажите только те функции, которые могут верно работать за пределами модуля.


